@model CinemaManagement.ViewModels.KhachHangChonGheViewModel
@{
    ViewData["Title"] = "Chọn ghế - " + Model.LichChieu.Phim.TenPhim;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid mt-4">
    <!-- Thông tin phim và lịch chiếu -->
    <div class="card mb-4 fade-in">
        <div class="card-header bg-primary text-white">
            <div class="row align-items-center">
                <div class="col">
                    <h4 class="mb-0">
                        <i class="fas fa-couch me-2"></i>
                        Chọn Ghế
                    </h4>
                </div>
                <div class="col-auto">
                    <a href="@Url.Action("ChiTietPhim", new { id = Model.LichChieu.MaPhim })" class="btn btn-light">
                        <i class="fas fa-arrow-left me-1"></i>Quay lại
                    </a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <h5 class="text-primary">@Model.LichChieu.Phim.TenPhim</h5>
                    <div class="row">
                        <div class="col-sm-6">
                            <p class="text-muted mb-1">
                                <i class="fas fa-door-open me-2 text-primary"></i>
                                <strong>Phòng:</strong> @Model.LichChieu.PhongChieu.TenPhong (@Model.LichChieu.PhongChieu.LoaiPhong)
                            </p>
                            <p class="text-muted mb-1">
                                <i class="fas fa-calendar me-2 text-primary"></i>
                                <strong>Ngày:</strong> @Model.LichChieu.ThoiGianBatDau.ToString("dd/MM/yyyy")
                            </p>
                        </div>
                        <div class="col-sm-6">
                            <p class="text-muted mb-1">
                                <i class="fas fa-clock me-2 text-primary"></i>
                                <strong>Giờ chiếu:</strong> @Model.LichChieu.ThoiGianBatDau.ToString("HH:mm") - @Model.LichChieu.ThoiGianKetThuc.ToString("HH:mm")
                            </p>
                            <p class="text-muted mb-0">
                                <i class="fas fa-money-bill-wave me-2 text-primary"></i>
                                <strong>Giá vé:</strong> <span class="text-success fw-bold">@Model.LichChieu.Gia.ToString("N0") VNĐ</span>
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="bg-light p-3 rounded border">
                        <h6 class="text-center mb-2">
                            <i class="fas fa-calculator me-1"></i>Tổng tiền:
                        </h6>
                        <h4 class="text-primary mb-1 text-center" id="totalAmount">0 ₫</h4>
                        <small class="text-muted d-block text-center" id="selectedCount">Chưa chọn ghế nào</small>
                        <div class="mt-2" id="selectedSeatsDisplay" style="display: none;">
                            <small class="text-muted">Ghế đã chọn:</small>
                            <div id="selectedSeatsList" class="mt-1"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sơ đồ ghế -->
    <div class="card fade-in">
        <div class="card-body">
            <!-- Màn hình -->
            <div class="screen mb-4">
                <i class="fas fa-video me-2"></i>MÀN HÌNH
            </div>

            <!-- Chú thích -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex justify-content-center flex-wrap gap-4">
                        <div class="d-flex align-items-center">
                            <div class="seat-legend available me-2"></div>
                            <small>Ghế có thể chọn</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="seat-legend selected me-2"></div>
                            <small>Ghế đã chọn</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="seat-legend occupied me-2"></div>
                            <small>Ghế đã bán</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="seat-legend not-released me-2"></div>
                            <small>Ghế chưa phát hành vé</small>
                        </div>
                        <div class="d-flex align-items-center">
                            <div class="seat-legend vip me-2"></div>
                            <small>Ghế VIP</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Loading indicator -->
            <div id="loadingSeats" class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Đang tải sơ đồ ghế...</span>
                </div>
                <p class="mt-2 text-muted">Đang tải sơ đồ ghế...</p>
            </div>

            <!-- Sơ đồ ghế -->
            <div class="text-center" id="seatMap" style="display: none;">
                @{
                    var occupiedSeats = Model.DanhSachVeDaBan.Select(v => v.MaGhe).ToList();
                    var releasedSeats = Model.DanhSachVeDaPhatHanh.Select(v => v.MaGhe).ToList();
                    var seatsByRow = Model.DanhSachGhe.GroupBy(g => g.SoGhe.Substring(0, 1)).OrderBy(g => g.Key);
                }

                @foreach (var row in seatsByRow)
                {
                    <div class="seat-row mb-3">
                        <span class="row-label me-3">@row.Key</span>
                        @foreach (var seat in row.OrderBy(s => int.Parse(s.SoGhe.Substring(1))))
                        {
                            var isOccupied = occupiedSeats.Contains(seat.MaGhe);
                            var isReleased = releasedSeats.Contains(seat.MaGhe);
                            var seatClass = "seat";
                            var isDisabled = false;
                            
                            if (isOccupied)
                            {
                                seatClass += " occupied";
                                isDisabled = true;
                            }
                            else if (!isReleased)
                            {
                                seatClass += " not-released";
                                isDisabled = true;
                            }
                            else if (seat.LoaiGhe == "VIP")
                            {
                                seatClass += " vip";
                            }

                            <span class="@seatClass" 
                                  data-seat-id="@seat.MaGhe" 
                                  data-seat-number="@seat.SoGhe"
                                  data-seat-price="@seat.GiaGhe"
                                  data-seat-type="@seat.LoaiGhe"
                                  @(isDisabled ? "disabled" : "")>
                                @seat.SoGhe.Substring(1)
                            </span>
                        }
                    </div>
                }
            </div>

            <!-- Nút tiếp tục -->
            <div class="text-center mt-4">
                <button type="button" class="btn btn-primary btn-lg px-5" id="proceedToPaymentBtn" disabled>
                    <i class="fas fa-credit-card me-2"></i>
                    Thanh toán
                </button>
                <div class="mt-2">
                    <small class="text-muted">Vé sẽ được đặt và thanh toán ngay lập tức</small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            console.log('=== KHỞI TẠO TRANG CHỌN GHẾ ===');
            console.log('Thời gian:', new Date().toLocaleString());
            console.log('Mã lịch chiếu:', '@Model.LichChieu.MaLichChieu');
            console.log('Tên phim:', '@Model.LichChieu.Phim.TenPhim');
            console.log('Phòng chiếu:', '@Model.LichChieu.PhongChieu.TenPhong');
            console.log('Thời gian chiếu:', '@Model.LichChieu.ThoiGianBatDau.ToString("dd/MM/yyyy HH:mm")');
            
            var selectedSeats = [];
            var totalAmount = 0;
            var lichChieuId = '@Model.LichChieu.MaLichChieu';
            var refreshInterval;

            console.log('Biến được khởi tạo:', {
                selectedSeats: selectedSeats,
                totalAmount: totalAmount,
                lichChieuId: lichChieuId
            });

            // Khởi tạo
            initializeSeatMap();
            startPeriodicRefresh();

            function initializeSeatMap() {
                // Hiển thị sơ đồ ghế sau khi load
                setTimeout(function() {
                    $('#loadingSeats').hide();
                    $('#seatMap').fadeIn();
                    attachSeatEvents();
                }, 500);
            }

            function attachSeatEvents() {
                console.log('=== ĐÍNH KÈM SỰ KIỆN CHO GHẾ ===');
                
                // Xử lý chọn ghế
                $('.seat:not(.occupied):not(.not-released)').off('click').on('click', function() {
                    var seatId = $(this).data('seat-id');
                    var seatNumber = $(this).data('seat-number');
                    var seatPrice = parseFloat($(this).data('seat-price'));
                    var seatType = $(this).data('seat-type');

                    console.log('Ghế được click:', {
                        id: seatId,
                        number: seatNumber,
                        price: seatPrice,
                        type: seatType,
                        isSelected: $(this).hasClass('selected')
                    });

                    if ($(this).hasClass('selected')) {
                        // Bỏ chọn ghế
                        $(this).removeClass('selected');
                        selectedSeats = selectedSeats.filter(seat => seat.id !== seatId);
                        totalAmount -= seatPrice;
                        console.log('Đã bỏ chọn ghế:', seatNumber);
                    } else {
                        // Chọn ghế
                        $(this).addClass('selected');
                        selectedSeats.push({
                            id: seatId,
                            number: seatNumber,
                            price: seatPrice,
                            type: seatType
                        });
                        totalAmount += seatPrice;
                        console.log('Đã chọn ghế:', seatNumber);
                    }

                    console.log('Trạng thái hiện tại:', {
                        selectedSeatsCount: selectedSeats.length,
                        totalAmount: totalAmount,
                        selectedSeatsList: selectedSeats.map(s => s.number)
                    });

                    updateUI();
                });
                
                console.log('Đã đính kèm sự kiện cho', $('.seat:not(.occupied):not(.not-released)').length, 'ghế');
            }

            function updateUI() {
                // Cập nhật tổng tiền
                $('#totalAmount').text(formatCurrency(totalAmount));
                
                // Cập nhật số ghế đã chọn
                if (selectedSeats.length === 0) {
                    $('#selectedCount').text('Chưa chọn ghế nào');
                    $('#proceedToPaymentBtn').prop('disabled', true);
                    $('#selectedSeatsDisplay').hide();
                } else {
                    $('#selectedCount').text('Đã chọn ' + selectedSeats.length + ' ghế');
                    $('#proceedToPaymentBtn').prop('disabled', false);
                    
                    // Hiển thị danh sách ghế đã chọn
                    var seatsList = selectedSeats.map(seat => 
                        '<span class="badge bg-primary me-1">' + seat.number + '</span>'
                    ).join('');
                    $('#selectedSeatsList').html(seatsList);
                    $('#selectedSeatsDisplay').show();
                }
            }

            // Xử lý thanh toán trực tiếp
            $('#proceedToPaymentBtn').click(function() {
                console.log('=== BẮT ĐẦU QUY TRÌNH THANH TOÁN ===');
                console.log('Thời gian:', new Date().toLocaleString());
                
                if (selectedSeats.length === 0) {
                    console.error('Lỗi: Chưa chọn ghế nào');
                    alert('Vui lòng chọn ít nhất một ghế');
                    return;
                }

                var button = $(this);
                button.prop('disabled', true);
                button.html('<i class="fas fa-spinner fa-spin me-2"></i>Đang xử lý...');

                console.log('Số ghế được chọn:', selectedSeats.length);
                console.log('Danh sách ghế chi tiết:', JSON.stringify(selectedSeats, null, 2));
                console.log('Tổng tiền:', totalAmount);
                console.log('Mã lịch chiếu:', lichChieuId);

                try {
                    // Chuyển đến trang thanh toán với thông tin ghế đã chọn
                    proceedToPaymentWithSeats(selectedSeats, button);
                } catch (error) {
                    console.error('Lỗi trong quá trình xử lý thanh toán:', error);
                    alert('Có lỗi xảy ra: ' + error.message);
                    
                    // Reset button
                    button.prop('disabled', false);
                    button.html('<i class="fas fa-credit-card me-2"></i>Thanh toán');
                }
            });

            // Hàm chuyển đến thanh toán trực tiếp
            function proceedToPaymentWithSeats(seats, button) {
                console.log('=== BƯỚC 1: TẠO FORM THANH TOÁN ===');
                
                try {
                    // Tạo form ẩn để gửi dữ liệu ghế đến trang thanh toán
                    var form = $('<form>', {
                        'method': 'POST',
                        'action': '@Url.Action("ThanhToan")',
                        'style': 'display: none;'
                    });
                    
                    console.log('Form action URL:', '@Url.Action("ThanhToan")');
                    console.log('Form method:', 'POST');

                    // Thêm thông tin lịch chiếu
                    form.append($('<input>', {
                        'type': 'hidden',
                        'name': 'MaLichChieu',
                        'value': lichChieuId
                    }));
                    console.log('Đã thêm MaLichChieu:', lichChieuId);

                    // Thêm thông tin từng ghế đã chọn
                    seats.forEach(function(seat, index) {
                        console.log('Đang xử lý ghế', index + 1, ':', seat);
                        
                        form.append($('<input>', {
                            'type': 'hidden',
                            'name': 'SelectedSeats[' + index + '].MaGhe',
                            'value': seat.id
                        }));
                        form.append($('<input>', {
                            'type': 'hidden',
                            'name': 'SelectedSeats[' + index + '].SoGhe',
                            'value': seat.number
                        }));
                        form.append($('<input>', {
                            'type': 'hidden',
                            'name': 'SelectedSeats[' + index + '].GiaGhe',
                            'value': seat.price
                        }));
                        form.append($('<input>', {
                            'type': 'hidden',
                            'name': 'SelectedSeats[' + index + '].LoaiGhe',
                            'value': seat.type
                        }));
                        
                        console.log('Đã thêm input cho ghế:', {
                            MaGhe: seat.id,
                            SoGhe: seat.number,
                            GiaGhe: seat.price,
                            LoaiGhe: seat.type
                        });
                    });

                    // Thêm tổng tiền
                    form.append($('<input>', {
                        'type': 'hidden',
                        'name': 'TongTien',
                        'value': totalAmount
                    }));
                    console.log('Đã thêm TongTien:', totalAmount);

                    console.log('=== BƯỚC 2: KIỂM TRA FORM ===');
                    console.log('Số input trong form:', form.find('input').length);
                    
                    // Log tất cả input trong form
                    form.find('input').each(function(index, input) {
                        console.log('Input', index + 1, ':', {
                            name: $(input).attr('name'),
                            value: $(input).val()
                        });
                    });

                    // Thêm form vào body
                    $('body').append(form);
                    console.log('Đã thêm form vào body');
                    
                    // Hiển thị thông báo đang chuyển hướng
                    button.html('<i class="fas fa-spinner fa-spin me-2"></i>Đang chuyển đến thanh toán...');
                    
                    console.log('=== BƯỚC 3: SUBMIT FORM ===');
                    console.log('Sẽ submit form sau 1 giây...');
                    
                    setTimeout(function() {
                        console.log('Đang submit form...');
                        try {
                            form.submit();
                            console.log('Form đã được submit thành công');
                        } catch (submitError) {
                            console.error('Lỗi khi submit form:', submitError);
                            alert('Lỗi khi submit form: ' + submitError.message);
                            
                            // Reset button
                            button.prop('disabled', false);
                            button.html('<i class="fas fa-credit-card me-2"></i>Thanh toán');
                        }
                    }, 1000);
                    
                } catch (error) {
                    console.error('Lỗi trong proceedToPaymentWithSeats:', error);
                    throw error;
                }
            }

            // Làm mới trạng thái ghế định kỳ
            function startPeriodicRefresh() {
                refreshInterval = setInterval(function() {
                    refreshSeatStatus();
                }, 30000); // Refresh mỗi 30 giây
            }

            function refreshSeatStatus() {
                $.ajax({
                    url: '@Url.Action("GetTrangThaiGhe")',
                    method: 'GET',
                    data: { maLichChieu: lichChieuId },
                    success: function(response) {
                        if (response.success) {
                            updateSeatStatus(response.data);
                        }
                    },
                    error: function() {
                        console.warn('Không thể làm mới trạng thái ghế');
                    }
                });
            }

            function updateSeatStatus(data) {
                // Reset tất cả ghế về trạng thái ban đầu
                $('.seat').removeClass('occupied not-released').removeAttr('disabled');
                
                // Cập nhật ghế đã bán
                data.gheDaBan.forEach(function(seatId) {
                    var seat = $('[data-seat-id="' + seatId + '"]');
                    if (!seat.hasClass('selected')) {
                        seat.addClass('occupied').attr('disabled', true);
                    }
                });
                
                // Cập nhật ghế chưa phát hành vé
                $('.seat').each(function() {
                    var seatId = $(this).data('seat-id');
                    if (!data.gheDaPhatHanh.includes(seatId) && !$(this).hasClass('selected')) {
                        $(this).addClass('not-released').attr('disabled', true);
                    }
                });

                // Reattach events
                attachSeatEvents();
            }

            // Format currency
            function formatCurrency(amount) {
                return new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(amount);
            }

            // Cleanup khi rời khỏi trang
            $(window).on('beforeunload', function() {
                if (refreshInterval) {
                    clearInterval(refreshInterval);
                }
            });
        });
    </script>

    <style>
        /* Animation cho fade in */
        .fade-in {
            animation: fadeIn 0.6s ease-in;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Screen styling */
        .screen {
            background: linear-gradient(135deg, #333 0%, #666 100%);
            color: white;
            text-align: center;
            padding: 15px;
            border-radius: 50px;
            font-weight: bold;
            font-size: 1.1rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            max-width: 400px;
            margin: 0 auto;
            border: 3px solid #444;
        }

        /* Seat row styling */
        .seat-row {
            line-height: 50px;
            margin-bottom: 15px;
        }
        
        .row-label {
            display: inline-block;
            width: 40px;
            font-weight: bold;
            color: var(--primary-color);
            font-size: 1.1rem;
        }
        
        /* Base seat styling */
        .seat {
            display: inline-block;
            width: 40px;
            height: 40px;
            margin: 0 3px;
            text-align: center;
            line-height: 40px;
            border-radius: 8px 8px 0 0;
            cursor: pointer;
            font-weight: bold;
            font-size: 12px;
            transition: all 0.3s ease;
            border: 2px solid #ddd;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            color: #495057;
            position: relative;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* Legend seats - non-interactive display only */
        .seat-legend {
            display: inline-block;
            width: 30px;
            height: 30px;
            margin: 0;
            border-radius: 6px 6px 0 0;
            font-weight: bold;
            font-size: 10px;
            transition: none;
            border: 2px solid #ddd;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            color: #495057;
            position: relative;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            cursor: default;
            pointer-events: none;
        }

        .seat-legend::before {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 50%;
            transform: translateX(-50%);
            width: 20px;
            height: 3px;
            background: #333;
            border-radius: 2px;
        }

        /* Legend seat states */
        .seat-legend.available {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-color: #ddd;
            color: #495057;
        }

        .seat-legend.selected {
            background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
            border-color: #28a745;
            color: white;
        }

        .seat-legend.occupied {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            border-color: #dc3545;
            color: white;
        }

        .seat-legend.not-released {
            background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
            border-color: #6c757d;
            color: white;
        }

        .seat-legend.vip {
            background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
            border-color: #ffc107;
            color: #212529;
        }

        .seat-legend.vip::after {
            content: '★';
            position: absolute;
            top: -6px;
            right: -6px;
            background: #ff6b35;
            color: white;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            font-size: 8px;
            line-height: 12px;
            text-align: center;
        }

        .seat::before {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 50%;
            transform: translateX(-50%);
            width: 30px;
            height: 4px;
            background: #333;
            border-radius: 2px;
        }

        /* Available seat */
        .seat:not(.occupied):not(.not-released):not(.selected):hover {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border-color: #007bff;
            color: white;
            transform: scale(1.1) translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,123,255,0.4);
        }

        /* Selected seat */
        .seat.selected {
            background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
            border-color: #28a745;
            color: white;
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(40,167,69,0.4);
            animation: pulse 0.6s ease-in-out;
        }

        /* Occupied seat */
        .seat.occupied {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            border-color: #dc3545;
            color: white;
            cursor: not-allowed;
            opacity: 0.8;
        }

        /* Not released seat */
        .seat.not-released {
            background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
            border-color: #6c757d;
            color: white;
            cursor: not-allowed;
            opacity: 0.7;
        }

        /* VIP seat */
        .seat.vip {
            background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%);
            border-color: #ffc107;
            color: #212529;
            font-weight: bold;
        }

        .seat.vip::after {
            content: '★';
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ff6b35;
            color: white;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            font-size: 10px;
            line-height: 16px;
            text-align: center;
        }

        .seat.vip:not(.occupied):not(.not-released):not(.selected):hover {
            background: linear-gradient(135deg, #ffcd39 0%, #ffc107 100%);
            transform: scale(1.1) translateY(-2px);
            box-shadow: 0 4px 12px rgba(255,193,7,0.4);
        }

        /* Pulse animation */
        @@keyframes pulse {
            0% { transform: scale(1.1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1.1); }
        }

        /* Loading animation */
        .spinner-border {
            width: 3rem;
            height: 3rem;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .seat {
                width: 35px;
                height: 35px;
                line-height: 35px;
                margin: 0 2px;
                font-size: 11px;
            }

            .seat::before {
                width: 25px;
                height: 3px;
            }

            .row-label {
                width: 35px;
                font-size: 1rem;
            }

            .screen {
                font-size: 1rem;
                padding: 12px;
            }
        }

        @@media (max-width: 576px) {
            .seat {
                width: 30px;
                height: 30px;
                line-height: 30px;
                margin: 0 1px;
                font-size: 10px;
            }

            .seat::before {
                width: 20px;
                height: 2px;
            }

            .row-label {
                width: 30px;
                font-size: 0.9rem;
            }

            .seat-row {
                margin-bottom: 10px;
            }
        }

        /* Card enhancements */
        .card {
            border: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .card-header {
            border-radius: 10px 10px 0 0 !important;
        }

        /* Button enhancements */
        .btn-lg {
            padding: 12px 30px;
            font-size: 1.1rem;
            border-radius: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }

        .btn-lg:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }

        .btn-primary.btn-lg {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border: none;
        }

        .btn-primary.btn-lg:hover {
            background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
        }

        /* Badge styling */
        .badge {
            font-size: 0.8rem;
            padding: 0.4em 0.6em;
        }

        /* Alert styling */
        .alert {
            border-radius: 10px;
            border: none;
        }
    </style>
}
