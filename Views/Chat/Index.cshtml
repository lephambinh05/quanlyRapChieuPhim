@model CinemaManagement.ViewModels.ChatViewModel
@{
    ViewData["Title"] = "Hỗ trợ trực tuyến";
}

<div class="container-fluid">
    <div class="row">
        <!-- Chat Container -->
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-comments me-2"></i>
                        Hỗ trợ trực tuyến
                    </h5>
                    <div class="d-flex align-items-center">
                        <span class="badge bg-success me-2" id="onlineStatus">
                            <i class="fas fa-circle me-1"></i>Trực tuyến
                        </span>
                        <small class="text-light">@Model.UserName</small>
                    </div>
                </div>
                
                <div class="card-body p-0">
                    <!-- Messages Container -->
                    <div id="messagesContainer" class="chat-messages" style="height: 400px; overflow-y: auto;">
                        <div class="text-center py-4" id="loadingMessages">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-2 text-muted">Đang kết nối...</p>
                        </div>
                    </div>
                    
                    <!-- Typing Indicator -->
                    <div id="typingIndicator" class="typing-indicator p-2 d-none">
                        <small class="text-muted">
                            <i class="fas fa-ellipsis-h me-1"></i>
                            <span id="typingUser">Ai đó</span> đang nhập tin nhắn...
                        </small>
                    </div>
                    
                    <!-- Message Input -->
                    <div class="chat-input p-3 border-top">
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" 
                                   placeholder="Nhập tin nhắn của bạn..." maxlength="1000">
                            <button class="btn btn-primary" type="button" id="sendButton">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                        <small class="text-muted mt-1">
                            <span id="charCount">0</span>/1000 ký tự
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Chat Widget (Floating) -->
<div class="chat-widget" id="chatWidget" style="display: none;">
    <div class="chat-widget-header bg-primary text-white p-2 rounded-top">
        <div class="d-flex justify-content-between align-items-center">
            <small><i class="fas fa-comments me-1"></i>Hỗ trợ</small>
            <button class="btn btn-sm btn-outline-light" id="minimizeChat">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="chat-widget-body p-2" id="chatWidgetBody">
        <div class="text-center">
            <i class="fas fa-comments text-muted mb-2" style="font-size: 2rem;"></i>
            <p class="mb-2">Cần hỗ trợ?</p>
            <button class="btn btn-primary btn-sm" id="openChat">
                <i class="fas fa-comments me-1"></i>Bắt đầu chat
            </button>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .chat-messages {
            background: #f8f9fa;
        }
        
        .message {
            margin: 8px;
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 70%;
            word-wrap: break-word;
        }
        
        .message.own {
            background: #007bff;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }
        
        .message.other {
            background: white;
            border: 1px solid #dee2e6;
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }
        
        .message.system {
            background: #ffc107;
            color: #212529;
            text-align: center;
            max-width: 90%;
            margin: 8px auto;
            border-radius: 10px;
        }
        
        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 4px;
        }
        
        .typing-indicator {
            background: #f8f9fa;
            border-top: 1px solid #dee2e6;
        }
        
        .chat-widget {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 300px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 1000;
        }
        
        .chat-widget.minimized {
            width: 60px;
            height: 60px;
        }
        
        .chat-widget.minimized .chat-widget-body {
            display: none;
        }
        
        .chat-widget.minimized .chat-widget-header {
            border-radius: 50%;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .chat-widget.minimized .chat-widget-header small {
            display: none;
        }
        
        .chat-widget.minimized .chat-widget-header button {
            display: none;
        }
        
        .chat-widget.minimized::after {
            content: '\f075';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            color: white;
            font-size: 1.5rem;
        }
        
        .unread-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        let connection;
        let currentRoomId = '@Model.CurrentRoomId';
        let currentUserId = '@Model.UserId';
        let currentUserName = '@Model.UserName';
        let currentUserRole = '@Model.UserRole';
        let isTyping = false;
        let typingTimer;
        let existingMessages = @Html.Raw(Json.Serialize(Model.Messages ?? new List<ChatMessage>()));

        // Khởi tạo SignalR connection
        async function startConnection() {
            try {
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .withAutomaticReconnect()
                    .build();

                // Xử lý sự kiện kết nối
                connection.on("ReceiveMessage", function (message) {
                    addMessage(message);
                    scrollToBottom();
                });

                connection.on("ReceiveSystemMessage", function (message) {
                    addSystemMessage(message.content);
                    scrollToBottom();
                });

                connection.on("UserTyping", function (userName, isTyping) {
                    showTypingIndicator(userName, isTyping);
                });

                connection.on("JoinedRoom", function (roomId) {
                    console.log("Đã tham gia phòng:", roomId);
                });

                connection.on("ReceiveError", function (error) {
                    showError(error);
                });

                // Kết nối
                await connection.start();
                console.log("Đã kết nối SignalR");

                // Tham gia phòng chat
                if (currentRoomId) {
                    await connection.invoke("JoinRoom", currentRoomId);
                    await connection.invoke("GetRoomMessages", currentRoomId, 50);
                }

                // Ẩn loading
                $('#loadingMessages').hide();
                
                // Hiển thị tin nhắn có sẵn
                if (existingMessages && existingMessages.length > 0) {
                    existingMessages.forEach(function(message) {
                        addMessage(message);
                    });
                    scrollToBottom();
                }

            } catch (err) {
                console.error("Lỗi kết nối SignalR:", err);
                showError("Không thể kết nối đến máy chủ chat");
            }
        }

        // Thêm tin nhắn vào container
        function addMessage(message) {
            const messageDiv = $('<div class="message"></div>');
            const timeDiv = $('<div class="message-time"></div>');
            
            if (message.senderId === currentUserId) {
                messageDiv.addClass('own');
            } else {
                messageDiv.addClass('other');
            }
            
            messageDiv.text(message.content);
            timeDiv.text(formatTime(message.timestamp));
            messageDiv.append(timeDiv);
            
            $('#messagesContainer').append(messageDiv);
        }

        // Thêm tin nhắn hệ thống
        function addSystemMessage(content) {
            const messageDiv = $('<div class="message system"></div>');
            messageDiv.text(content);
            $('#messagesContainer').append(messageDiv);
        }

        // Hiển thị typing indicator
        function showTypingIndicator(userName, isTyping) {
            if (isTyping) {
                $('#typingUser').text(userName);
                $('#typingIndicator').removeClass('d-none');
            } else {
                $('#typingIndicator').addClass('d-none');
            }
        }

        // Hiển thị lỗi
        function showError(message) {
            const errorDiv = $('<div class="alert alert-danger m-3"></div>');
            errorDiv.text(message);
            $('#messagesContainer').append(errorDiv);
        }

        // Format thời gian
        function formatTime(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleTimeString('vi-VN', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }

        // Scroll xuống cuối
        function scrollToBottom() {
            const container = document.getElementById('messagesContainer');
            container.scrollTop = container.scrollHeight;
        }

        // Gửi tin nhắn
        async function sendMessage() {
            const messageInput = $('#messageInput');
            const message = messageInput.val().trim();
            
            if (!message || !connection) return;
            
            try {
                await connection.invoke("SendMessage", currentRoomId, message);
                messageInput.val('');
                updateCharCount();
            } catch (err) {
                console.error("Lỗi gửi tin nhắn:", err);
                showError("Không thể gửi tin nhắn");
            }
        }

        // Cập nhật số ký tự
        function updateCharCount() {
            const count = $('#messageInput').val().length;
            $('#charCount').text(count);
        }

        // Xử lý typing
        function handleTyping() {
            if (!isTyping) {
                isTyping = true;
                connection.invoke("Typing", currentRoomId, true);
            }
            
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                isTyping = false;
                connection.invoke("Typing", currentRoomId, false);
            }, 1000);
        }

        // Event handlers
        $(document).ready(function() {
            // Khởi tạo connection
            startConnection();
            
            // Gửi tin nhắn khi nhấn Enter
            $('#messageInput').on('keypress', function(e) {
                if (e.which === 13 && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // Gửi tin nhắn khi click button
            $('#sendButton').on('click', sendMessage);
            
            // Cập nhật số ký tự
            $('#messageInput').on('input', function() {
                updateCharCount();
                handleTyping();
            });
            
            // Chat widget
            $('#openChat').on('click', function() {
                $('#chatWidget').hide();
                $('html, body').animate({
                    scrollTop: $('.chat-messages').offset().top - 100
                }, 500);
            });
            
            $('#minimizeChat').on('click', function() {
                $('#chatWidget').toggleClass('minimized');
            });
            
            // Hiển thị chat widget sau 5 giây
            setTimeout(() => {
                $('#chatWidget').show();
            }, 5000);
        });
    </script>
} 